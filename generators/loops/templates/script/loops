#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'

# We need this to be able to start the process w/o being 
# in the RAILS_ROOT (MERB_ROOT) directory
ROOT_DIR = File.expand_path('..', File.dirname(__FILE__))
Dir.chdir(ROOT_DIR)

# Default options
options = { 
  :daemonize => false, 
  :loops => [], 
  :debug_loop => nil,
  :all_loops => false, 
  :list_loops => false, 
  :pid_file => nil, 
  :stop => false,
  :framework => 'rails',
  :environment => nil
}

# Parse command line options
opts = OptionParser.new do |opt|
  opt.banner = "Usage: loops [options]"
  opt.separator ""
  opt.separator "Specific options:"

  opt.on('-d', '--daemonize', 'Daemonize when all loops started') { |v| options[:daemonize] = v }
  opt.on('-s', '--stop', 'Stop daemonized loops if running.') { |v| options[:stop] = v }
  opt.on('-p', '--pid=file', 'Override loops.yml pid_file option') { |v| options[:pid_file] = v }
  opt.on('-l', '--loop=loop_name', 'Start specified loop(s) only') { |v| options[:loops] << v }
  opt.on('-D', '--debug=loop_name', 'Start single instance of a loop in foreground for debugging purposes') { |v| options[:debug_loop] = v }
  opt.on('-a', '--all', 'Start all loops') { |v| options[:all_loops] = v }
  opt.on('-L', '--list', 'Shows all available loops with their options') { |v| options[:list_loops] = v }
  opt.on('-f', '--framework=name', 'Bootstraps Rails (rails - default value) or Merb (merb) before starting loops. Use "none" for plain ruby loops.') { |v| options[:framework] = v }
  opt.on('-e', '--environment=env', 'Set RAILS_ENV (MERB_ENV) value') { |v| options[:environment] = v }
  opt.on('-rlibrary', '--require=library', 'require the library before executing the script') { |library| require library }

  opt.on_tail("-h", "--help", "Show this message") do
    puts(opt)
    exit(0)
  end

  opt.parse!(ARGV)
end

LOOPS_ROOT = ROOT_DIR
LOOPS_CONFIG_FILE = File.join(LOOPS_ROOT, 'config/loops.yml')

require 'loops'
require 'loops/daemonize'

# Load config file
puts "Loading config..."
Loops.load_config(LOOPS_CONFIG_FILE)
options[:pid_file] ||= (Loops.global_config['pid_file'] || "/var/run/loops.pid")
options[:pid_file] = File.join(LOOPS_ROOT, options[:pid_file]) unless options[:pid_file] =~ /^\//


# Stop/kill loops if requested
if options[:stop]
  STDOUT.sync = true
  raise "No pid file or a stale pid file!" unless Loops::Daemonize.check_pid(options[:pid_file])
  pid = Loops::Daemonize.read_pid(options[:pid_file])
  print "Killing the process: #{pid}: "

  loop do
    Process.kill('SIGTERM', pid)
    sleep(1)
    break unless Loops::Daemonize.check_pid(options[:pid_file])
    print(".")
  end

  puts " Done!"
  exit(0)
end


# List loops if requested
if options[:list_loops]
  puts "Available loops:"
  Loops.loops_config.each do |name, config|
    puts "Loop: #{name}" + (config['disabled'] ? ' (disabled)' : '')
    config.each do |k,v|
      puts " - #{k}: #{v}"
    end
  end
  puts
  exit(0)
end


case options[:framework]
  when 'rails' then
    ENV['RAILS_ENV'] = options[:environment] if options[:environment]

    # Bootstrap Rails
    require File.join(ROOT_DIR, 'config/boot')
    require File.join(ROOT_DIR, 'config/environment')
  
    # Loops default logger
    default_logger = Rails.logger
  when 'merb' then
    require 'merb-core'

    ENV['MERB_ENV'] = options[:environment] if options[:environment]

    # Bootstrap Merb
    Merb.start_environment(:adapter => 'runner', :environment => ENV['MERB_ENV'] || 'development')

    # Loops default logger
    default_logger = Merb.logger
  when 'none' then 
    # Plain ruby loops
    default_logger = Logger.new($stdout)
  else
    puts "Invalid framework name: #{options[:framework]}. Valid values are: none, rails, merb."
    exit(1)
end


# Use stdout for logging in debug loops
if options[:debug_loop]
  puts "Using console for logging debug information"
  LOOPS_DEFAULT_LOGGER = Logger.new($stdout)  
else
  LOOPS_DEFAULT_LOGGER = default_logger
end

# For merb apps
$LOAD_PATH.unshift("vendor/plugins/loops/lib")

if options[:debug_loop]
  puts "Starting one loop in debug mode: #{options[:debug_loop]}"
  Loops.debug_loop!(options[:debug_loop])
  exit(0)
end


# Ignore --loop options if --all parameter passed
options[:loops] = :all if options[:all_loops] 

# Check what loops we gonna run
if options[:loops].empty?
  puts(opts) # Show help
  exit(0)
end

# Pid file check
if Loops::Daemonize.check_pid(options[:pid_file])
  puts "Can't start, another process exists!"
  exit(1)
end

# Daemonization
if options[:daemonize]
  app_name = "loops monitor: #{ options[:loops].join(' ') rescue 'all' }\0"
  Loops::Daemonize.daemonize(app_name) 
end

# Pid file creation
puts "Creating PID file"
Loops::Daemonize.create_pid(options[:pid_file]) 

# Workers processing
puts "Starting workers"
Loops.start_loops!(options[:loops])

# Workers exited, cleaning up
puts "Cleaning pid file..."
File.delete(options[:pid_file]) rescue nil

